// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/status-im/status-go/geth/txqueue/fake (interfaces: FakePublicTxApi)

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	big "math/big"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	hexutil "github.com/ethereum/go-ethereum/common/hexutil"
	rpc "github.com/ethereum/go-ethereum/rpc"
	gomock "github.com/golang/mock/gomock"
)

// MockFakePublicTxApi is a mock of FakePublicTxApi interface
type MockFakePublicTxApi struct {
	ctrl     *gomock.Controller
	recorder *MockFakePublicTxApiMockRecorder
}

// MockFakePublicTxApiMockRecorder is the mock recorder for MockFakePublicTxApi
type MockFakePublicTxApiMockRecorder struct {
	mock *MockFakePublicTxApi
}

// NewMockFakePublicTxApi creates a new mock instance
func NewMockFakePublicTxApi(ctrl *gomock.Controller) *MockFakePublicTxApi {
	mock := &MockFakePublicTxApi{ctrl: ctrl}
	mock.recorder = &MockFakePublicTxApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFakePublicTxApi) EXPECT() *MockFakePublicTxApiMockRecorder {
	return m.recorder
}

// EstimateGas mocks base method
func (m *MockFakePublicTxApi) EstimateGas(arg0 context.Context, arg1 CallArgs) (*hexutil.Big, error) {
	ret := m.ctrl.Call(m, "EstimateGas", arg0, arg1)
	ret0, _ := ret[0].(*hexutil.Big)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateGas indicates an expected call of EstimateGas
func (mr *MockFakePublicTxApiMockRecorder) EstimateGas(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateGas", reflect.TypeOf((*MockFakePublicTxApi)(nil).EstimateGas), arg0, arg1)
}

// GasPrice mocks base method
func (m *MockFakePublicTxApi) GasPrice(arg0 context.Context) (*big.Int, error) {
	ret := m.ctrl.Call(m, "GasPrice", arg0)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GasPrice indicates an expected call of GasPrice
func (mr *MockFakePublicTxApiMockRecorder) GasPrice(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GasPrice", reflect.TypeOf((*MockFakePublicTxApi)(nil).GasPrice), arg0)
}

// GetTransactionCount mocks base method
func (m *MockFakePublicTxApi) GetTransactionCount(arg0 context.Context, arg1 common.Address, arg2 rpc.BlockNumber) (*hexutil.Uint64, error) {
	ret := m.ctrl.Call(m, "GetTransactionCount", arg0, arg1, arg2)
	ret0, _ := ret[0].(*hexutil.Uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionCount indicates an expected call of GetTransactionCount
func (mr *MockFakePublicTxApiMockRecorder) GetTransactionCount(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionCount", reflect.TypeOf((*MockFakePublicTxApi)(nil).GetTransactionCount), arg0, arg1, arg2)
}

// SendRawTransaction mocks base method
func (m *MockFakePublicTxApi) SendRawTransaction(arg0 context.Context, arg1 hexutil.Bytes) (common.Hash, error) {
	ret := m.ctrl.Call(m, "SendRawTransaction", arg0, arg1)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRawTransaction indicates an expected call of SendRawTransaction
func (mr *MockFakePublicTxApiMockRecorder) SendRawTransaction(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRawTransaction", reflect.TypeOf((*MockFakePublicTxApi)(nil).SendRawTransaction), arg0, arg1)
}
